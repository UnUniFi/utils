/* tslint:disable */
/* eslint-disable */
/**
 * JPYX - Legacy REST and gRPC Gateway docs
 * A REST interface for state queries, legacy transactions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }
 * @export
 * @interface CosmosBaseQueryV1beta1PageRequest
 */
export interface CosmosBaseQueryV1beta1PageRequest {
    /**
     * key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    key?: string;
    /**
     * offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    offset?: string;
    /**
     * limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    limit?: string;
    /**
     * count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @type {boolean}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    count_total?: boolean;
}
/**
 * PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.   message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }
 * @export
 * @interface CosmosBaseQueryV1beta1PageResponse
 */
export interface CosmosBaseQueryV1beta1PageResponse {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageResponse
     */
    next_key?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageResponse
     */
    total?: string;
}
/**
 * Coin defines a token with a denomination and an amount.  NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.
 * @export
 * @interface CosmosBaseV1beta1Coin
 */
export interface CosmosBaseV1beta1Coin {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseV1beta1Coin
     */
    denom?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseV1beta1Coin
     */
    amount?: string;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface GoogleProtobufAny
 */
export interface GoogleProtobufAny {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof GoogleProtobufAny
     */
    type_url?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof GoogleProtobufAny
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface GrpcGatewayRuntimeError
 */
export interface GrpcGatewayRuntimeError {
    /**
     * 
     * @type {string}
     * @memberof GrpcGatewayRuntimeError
     */
    error?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcGatewayRuntimeError
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcGatewayRuntimeError
     */
    message?: string;
    /**
     * 
     * @type {Array<InlineResponse200Auctions>}
     * @memberof GrpcGatewayRuntimeError
     */
    details?: Array<InlineResponse200Auctions>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<InlineResponse200Auctions>}
     * @memberof InlineResponse200
     */
    auctions?: Array<InlineResponse200Auctions>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse200
     */
    pagination?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {InlineResponse200Auctions}
     * @memberof InlineResponse2001
     */
    auction?: InlineResponse200Auctions;
}
/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {InlineResponse20010Params}
     * @memberof InlineResponse20010
     */
    params?: InlineResponse20010Params;
}
/**
 * 
 * @export
 * @interface InlineResponse20010Params
 */
export interface InlineResponse20010Params {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse20010Params
     */
    active?: boolean;
    /**
     * 
     * @type {Array<InlineResponse20010ParamsPeriods>}
     * @memberof InlineResponse20010Params
     */
    periods?: Array<InlineResponse20010ParamsPeriods>;
}
/**
 * 
 * @export
 * @interface InlineResponse20010ParamsPeriods
 */
export interface InlineResponse20010ParamsPeriods {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010ParamsPeriods
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010ParamsPeriods
     */
    end?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010ParamsPeriods
     */
    inflation?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * 
     * @type {Array<InlineResponse20011Markets>}
     * @memberof InlineResponse20011
     */
    markets?: Array<InlineResponse20011Markets>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20011
     */
    pagination?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse20011Markets
 */
export interface InlineResponse20011Markets {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011Markets
     */
    market_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011Markets
     */
    base_asset?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011Markets
     */
    quote_asset?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse20011Markets
     */
    oracles?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse20011Markets
     */
    active?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse20012
     */
    oracles?: Array<string>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20012
     */
    pagination?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse20013
 */
export interface InlineResponse20013 {
    /**
     * 
     * @type {InlineResponse20013Price}
     * @memberof InlineResponse20013
     */
    price?: InlineResponse20013Price;
}
/**
 * 
 * @export
 * @interface InlineResponse20013Price
 */
export interface InlineResponse20013Price {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20013Price
     */
    market_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20013Price
     */
    price?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20014
 */
export interface InlineResponse20014 {
    /**
     * 
     * @type {Array<InlineResponse20014Prices>}
     * @memberof InlineResponse20014
     */
    prices?: Array<InlineResponse20014Prices>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20014
     */
    pagination?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse20014Prices
 */
export interface InlineResponse20014Prices {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20014Prices
     */
    market_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20014Prices
     */
    oracle_address?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20014Prices
     */
    price?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20014Prices
     */
    expiry?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20015
 */
export interface InlineResponse20015 {
    /**
     * 
     * @type {InlineResponse20015Params}
     * @memberof InlineResponse20015
     */
    params?: InlineResponse20015Params;
}
/**
 * 
 * @export
 * @interface InlineResponse20015Params
 */
export interface InlineResponse20015Params {
    /**
     * 
     * @type {Array<InlineResponse20011Markets>}
     * @memberof InlineResponse20015Params
     */
    markets?: Array<InlineResponse20011Markets>;
}
/**
 * 
 * @export
 * @interface InlineResponse20016
 */
export interface InlineResponse20016 {
    /**
     * 
     * @type {Array<InlineResponse20013Price>}
     * @memberof InlineResponse20016
     */
    prices?: Array<InlineResponse20013Price>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20016
     */
    pagination?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {InlineResponse2002Params}
     * @memberof InlineResponse2002
     */
    params?: InlineResponse2002Params;
}
/**
 * 
 * @export
 * @interface InlineResponse2002Params
 */
export interface InlineResponse2002Params {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Params
     */
    max_auction_duration?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Params
     */
    bid_duration?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Params
     */
    increment_surplus?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Params
     */
    increment_debt?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Params
     */
    increment_collateral?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<InlineResponse200Auctions>}
     * @memberof InlineResponse2003
     */
    accounts?: Array<InlineResponse200Auctions>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Array<InlineResponse2004Cdp1>}
     * @memberof InlineResponse2004
     */
    cdp?: Array<InlineResponse2004Cdp1>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse2004
     */
    pagination?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2004Cdp
 */
export interface InlineResponse2004Cdp {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Cdp
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Cdp
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Cdp
     */
    type?: string;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof InlineResponse2004Cdp
     */
    collateral?: InlineResponse2004CdpCollateral;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof InlineResponse2004Cdp
     */
    principal?: InlineResponse2004CdpCollateral;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof InlineResponse2004Cdp
     */
    accumulated_fees?: InlineResponse2004CdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Cdp
     */
    fees_updated?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Cdp
     */
    interest_factor?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2004Cdp1
 */
export interface InlineResponse2004Cdp1 {
    /**
     * 
     * @type {InlineResponse2004Cdp}
     * @memberof InlineResponse2004Cdp1
     */
    cdp?: InlineResponse2004Cdp;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof InlineResponse2004Cdp1
     */
    collateral_value?: InlineResponse2004CdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Cdp1
     */
    collateralization_ratio?: string;
}
/**
 * Coin defines a token with a denomination and an amount.  NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.
 * @export
 * @interface InlineResponse2004CdpCollateral
 */
export interface InlineResponse2004CdpCollateral {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004CdpCollateral
     */
    denom?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004CdpCollateral
     */
    amount?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {InlineResponse2004Cdp1}
     * @memberof InlineResponse2005
     */
    cdp?: InlineResponse2004Cdp1;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {Array<InlineResponse2006Deposits>}
     * @memberof InlineResponse2006
     */
    deposits?: Array<InlineResponse2006Deposits>;
}
/**
 * 
 * @export
 * @interface InlineResponse2006Deposits
 */
export interface InlineResponse2006Deposits {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Deposits
     */
    cdp_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Deposits
     */
    depositor?: string;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof InlineResponse2006Deposits
     */
    amount?: InlineResponse2004CdpCollateral;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {InlineResponse2007Params}
     * @memberof InlineResponse2007
     */
    params?: InlineResponse2007Params;
}
/**
 * 
 * @export
 * @interface InlineResponse2007Params
 */
export interface InlineResponse2007Params {
    /**
     * 
     * @type {Array<InlineResponse2007ParamsCollateralParams>}
     * @memberof InlineResponse2007Params
     */
    collateral_params?: Array<InlineResponse2007ParamsCollateralParams>;
    /**
     * 
     * @type {InlineResponse2007ParamsDebtParam}
     * @memberof InlineResponse2007Params
     */
    debt_param?: InlineResponse2007ParamsDebtParam;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof InlineResponse2007Params
     */
    global_debt_limit?: InlineResponse2004CdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007Params
     */
    surplus_auction_threshold?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007Params
     */
    surplus_auction_lot?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007Params
     */
    debt_auction_threshold?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007Params
     */
    debt_auction_lot?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2007Params
     */
    circuit_breaker?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2007ParamsCollateralParams
 */
export interface InlineResponse2007ParamsCollateralParams {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    denom?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    liquidation_ratio?: string;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    debt_limit?: InlineResponse2004CdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    stability_fee?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    auction_size?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    liquidation_penalty?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    prefix?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    spot_market_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    liquidation_market_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    keeper_reward_percentage?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    check_collateralization_index_count?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsCollateralParams
     */
    conversion_factor?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2007ParamsDebtParam
 */
export interface InlineResponse2007ParamsDebtParam {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsDebtParam
     */
    denom?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsDebtParam
     */
    reference_asset?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsDebtParam
     */
    conversion_factor?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007ParamsDebtParam
     */
    debt_floor?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {InlineResponse2008Params}
     * @memberof InlineResponse2008
     */
    params?: InlineResponse2008Params;
}
/**
 * 
 * @export
 * @interface InlineResponse2008Params
 */
export interface InlineResponse2008Params {
    /**
     * 
     * @type {Array<InlineResponse2008ParamsCdpMintingRewardPeriods>}
     * @memberof InlineResponse2008Params
     */
    cdp_minting_reward_periods?: Array<InlineResponse2008ParamsCdpMintingRewardPeriods>;
    /**
     * 
     * @type {Array<InlineResponse2008ParamsClaimMultipliers>}
     * @memberof InlineResponse2008Params
     */
    claim_multipliers?: Array<InlineResponse2008ParamsClaimMultipliers>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008Params
     */
    claim_end?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2008ParamsCdpMintingRewardPeriods
 */
export interface InlineResponse2008ParamsCdpMintingRewardPeriods {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ParamsCdpMintingRewardPeriods
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ParamsCdpMintingRewardPeriods
     */
    collateral_type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ParamsCdpMintingRewardPeriods
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ParamsCdpMintingRewardPeriods
     */
    end?: string;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof InlineResponse2008ParamsCdpMintingRewardPeriods
     */
    rewards_per_second?: InlineResponse2004CdpCollateral;
}
/**
 * 
 * @export
 * @interface InlineResponse2008ParamsClaimMultipliers
 */
export interface InlineResponse2008ParamsClaimMultipliers {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ParamsClaimMultipliers
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ParamsClaimMultipliers
     */
    months_lockup?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ParamsClaimMultipliers
     */
    factor?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {Array<InlineResponse2004CdpCollateral>}
     * @memberof InlineResponse2009
     */
    balances?: Array<InlineResponse2004CdpCollateral>;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface InlineResponse200Auctions
 */
export interface InlineResponse200Auctions {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof InlineResponse200Auctions
     */
    type_url?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof InlineResponse200Auctions
     */
    value?: string;
}
/**
 * PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.   message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }
 * @export
 * @interface InlineResponse200Pagination
 */
export interface InlineResponse200Pagination {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Pagination
     */
    next_key?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Pagination
     */
    total?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault
 */
export interface InlineResponseDefault {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault
     */
    error?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault
     */
    message?: string;
    /**
     * 
     * @type {Array<InlineResponse200Auctions>}
     * @memberof InlineResponseDefault
     */
    details?: Array<InlineResponse200Auctions>;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1
 */
export interface InlineResponseDefault1 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1
     */
    error?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1
     */
    message?: string;
    /**
     * 
     * @type {Array<InlineResponseDefault1Details>}
     * @memberof InlineResponseDefault1
     */
    details?: Array<InlineResponseDefault1Details>;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1Details
 */
export interface InlineResponseDefault1Details {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Details
     */
    type_url?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Details
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface UnunifiAuctionParams
 */
export interface UnunifiAuctionParams {
    /**
     * 
     * @type {string}
     * @memberof UnunifiAuctionParams
     */
    max_auction_duration?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiAuctionParams
     */
    bid_duration?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiAuctionParams
     */
    increment_surplus?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiAuctionParams
     */
    increment_debt?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiAuctionParams
     */
    increment_collateral?: string;
}
/**
 * 
 * @export
 * @interface UnunifiAuctionQueryAllAuctionResponse
 */
export interface UnunifiAuctionQueryAllAuctionResponse {
    /**
     * 
     * @type {Array<InlineResponse200Auctions>}
     * @memberof UnunifiAuctionQueryAllAuctionResponse
     */
    auctions?: Array<InlineResponse200Auctions>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof UnunifiAuctionQueryAllAuctionResponse
     */
    pagination?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface UnunifiAuctionQueryGetAuctionResponse
 */
export interface UnunifiAuctionQueryGetAuctionResponse {
    /**
     * 
     * @type {InlineResponse200Auctions}
     * @memberof UnunifiAuctionQueryGetAuctionResponse
     */
    auction?: InlineResponse200Auctions;
}
/**
 * 
 * @export
 * @interface UnunifiAuctionQueryParamsResponse
 */
export interface UnunifiAuctionQueryParamsResponse {
    /**
     * 
     * @type {InlineResponse2002Params}
     * @memberof UnunifiAuctionQueryParamsResponse
     */
    params?: InlineResponse2002Params;
}
/**
 * 
 * @export
 * @interface UnunifiCdpAugmentedCdp
 */
export interface UnunifiCdpAugmentedCdp {
    /**
     * 
     * @type {InlineResponse2004Cdp}
     * @memberof UnunifiCdpAugmentedCdp
     */
    cdp?: InlineResponse2004Cdp;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof UnunifiCdpAugmentedCdp
     */
    collateral_value?: InlineResponse2004CdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpAugmentedCdp
     */
    collateralization_ratio?: string;
}
/**
 * 
 * @export
 * @interface UnunifiCdpCdp
 */
export interface UnunifiCdpCdp {
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCdp
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCdp
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCdp
     */
    type?: string;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof UnunifiCdpCdp
     */
    collateral?: InlineResponse2004CdpCollateral;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof UnunifiCdpCdp
     */
    principal?: InlineResponse2004CdpCollateral;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof UnunifiCdpCdp
     */
    accumulated_fees?: InlineResponse2004CdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCdp
     */
    fees_updated?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCdp
     */
    interest_factor?: string;
}
/**
 * 
 * @export
 * @interface UnunifiCdpCollateralParam
 */
export interface UnunifiCdpCollateralParam {
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    denom?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    liquidation_ratio?: string;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof UnunifiCdpCollateralParam
     */
    debt_limit?: InlineResponse2004CdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    stability_fee?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    auction_size?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    liquidation_penalty?: string;
    /**
     * 
     * @type {number}
     * @memberof UnunifiCdpCollateralParam
     */
    prefix?: number;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    spot_market_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    liquidation_market_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    keeper_reward_percentage?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    check_collateralization_index_count?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpCollateralParam
     */
    conversion_factor?: string;
}
/**
 * 
 * @export
 * @interface UnunifiCdpDebtParam
 */
export interface UnunifiCdpDebtParam {
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    denom?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    reference_asset?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    conversion_factor?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDebtParam
     */
    debt_floor?: string;
}
/**
 * 
 * @export
 * @interface UnunifiCdpDeposit
 */
export interface UnunifiCdpDeposit {
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDeposit
     */
    cdp_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpDeposit
     */
    depositor?: string;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof UnunifiCdpDeposit
     */
    amount?: InlineResponse2004CdpCollateral;
}
/**
 * 
 * @export
 * @interface UnunifiCdpParams
 */
export interface UnunifiCdpParams {
    /**
     * 
     * @type {Array<InlineResponse2007ParamsCollateralParams>}
     * @memberof UnunifiCdpParams
     */
    collateral_params?: Array<InlineResponse2007ParamsCollateralParams>;
    /**
     * 
     * @type {InlineResponse2007ParamsDebtParam}
     * @memberof UnunifiCdpParams
     */
    debt_param?: InlineResponse2007ParamsDebtParam;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof UnunifiCdpParams
     */
    global_debt_limit?: InlineResponse2004CdpCollateral;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpParams
     */
    surplus_auction_threshold?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpParams
     */
    surplus_auction_lot?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpParams
     */
    debt_auction_threshold?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiCdpParams
     */
    debt_auction_lot?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UnunifiCdpParams
     */
    circuit_breaker?: boolean;
}
/**
 * 
 * @export
 * @interface UnunifiCdpQueryAllAccountResponse
 */
export interface UnunifiCdpQueryAllAccountResponse {
    /**
     * 
     * @type {Array<InlineResponse200Auctions>}
     * @memberof UnunifiCdpQueryAllAccountResponse
     */
    accounts?: Array<InlineResponse200Auctions>;
}
/**
 * 
 * @export
 * @interface UnunifiCdpQueryAllCdpResponse
 */
export interface UnunifiCdpQueryAllCdpResponse {
    /**
     * 
     * @type {Array<InlineResponse2004Cdp1>}
     * @memberof UnunifiCdpQueryAllCdpResponse
     */
    cdp?: Array<InlineResponse2004Cdp1>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof UnunifiCdpQueryAllCdpResponse
     */
    pagination?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface UnunifiCdpQueryAllDepositResponse
 */
export interface UnunifiCdpQueryAllDepositResponse {
    /**
     * 
     * @type {Array<InlineResponse2006Deposits>}
     * @memberof UnunifiCdpQueryAllDepositResponse
     */
    deposits?: Array<InlineResponse2006Deposits>;
}
/**
 * 
 * @export
 * @interface UnunifiCdpQueryGetCdpResponse
 */
export interface UnunifiCdpQueryGetCdpResponse {
    /**
     * 
     * @type {InlineResponse2004Cdp1}
     * @memberof UnunifiCdpQueryGetCdpResponse
     */
    cdp?: InlineResponse2004Cdp1;
}
/**
 * 
 * @export
 * @interface UnunifiCdpQueryParamsResponse
 */
export interface UnunifiCdpQueryParamsResponse {
    /**
     * 
     * @type {InlineResponse2007Params}
     * @memberof UnunifiCdpQueryParamsResponse
     */
    params?: InlineResponse2007Params;
}
/**
 * 
 * @export
 * @interface UnunifiIncentiveMultiplier
 */
export interface UnunifiIncentiveMultiplier {
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveMultiplier
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveMultiplier
     */
    months_lockup?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveMultiplier
     */
    factor?: string;
}
/**
 * 
 * @export
 * @interface UnunifiIncentiveParams
 */
export interface UnunifiIncentiveParams {
    /**
     * 
     * @type {Array<InlineResponse2008ParamsCdpMintingRewardPeriods>}
     * @memberof UnunifiIncentiveParams
     */
    cdp_minting_reward_periods?: Array<InlineResponse2008ParamsCdpMintingRewardPeriods>;
    /**
     * 
     * @type {Array<InlineResponse2008ParamsClaimMultipliers>}
     * @memberof UnunifiIncentiveParams
     */
    claim_multipliers?: Array<InlineResponse2008ParamsClaimMultipliers>;
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveParams
     */
    claim_end?: string;
}
/**
 * 
 * @export
 * @interface UnunifiIncentiveQueryParamsResponse
 */
export interface UnunifiIncentiveQueryParamsResponse {
    /**
     * 
     * @type {InlineResponse2008Params}
     * @memberof UnunifiIncentiveQueryParamsResponse
     */
    params?: InlineResponse2008Params;
}
/**
 * 
 * @export
 * @interface UnunifiIncentiveRewardPeriod
 */
export interface UnunifiIncentiveRewardPeriod {
    /**
     * 
     * @type {boolean}
     * @memberof UnunifiIncentiveRewardPeriod
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveRewardPeriod
     */
    collateral_type?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveRewardPeriod
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiIncentiveRewardPeriod
     */
    end?: string;
    /**
     * 
     * @type {InlineResponse2004CdpCollateral}
     * @memberof UnunifiIncentiveRewardPeriod
     */
    rewards_per_second?: InlineResponse2004CdpCollateral;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedCurrentPrice
 */
export interface UnunifiPricefeedCurrentPrice {
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedCurrentPrice
     */
    market_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedCurrentPrice
     */
    price?: string;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedMarket
 */
export interface UnunifiPricefeedMarket {
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedMarket
     */
    market_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedMarket
     */
    base_asset?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedMarket
     */
    quote_asset?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnunifiPricefeedMarket
     */
    oracles?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UnunifiPricefeedMarket
     */
    active?: boolean;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedParams
 */
export interface UnunifiPricefeedParams {
    /**
     * 
     * @type {Array<InlineResponse20011Markets>}
     * @memberof UnunifiPricefeedParams
     */
    markets?: Array<InlineResponse20011Markets>;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedPostedPrice
 */
export interface UnunifiPricefeedPostedPrice {
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedPostedPrice
     */
    market_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedPostedPrice
     */
    oracle_address?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedPostedPrice
     */
    price?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiPricefeedPostedPrice
     */
    expiry?: string;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedQueryAllMarketResponse
 */
export interface UnunifiPricefeedQueryAllMarketResponse {
    /**
     * 
     * @type {Array<InlineResponse20011Markets>}
     * @memberof UnunifiPricefeedQueryAllMarketResponse
     */
    markets?: Array<InlineResponse20011Markets>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof UnunifiPricefeedQueryAllMarketResponse
     */
    pagination?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedQueryAllOracleResponse
 */
export interface UnunifiPricefeedQueryAllOracleResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnunifiPricefeedQueryAllOracleResponse
     */
    oracles?: Array<string>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof UnunifiPricefeedQueryAllOracleResponse
     */
    pagination?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedQueryAllPriceResponse
 */
export interface UnunifiPricefeedQueryAllPriceResponse {
    /**
     * 
     * @type {Array<InlineResponse20013Price>}
     * @memberof UnunifiPricefeedQueryAllPriceResponse
     */
    prices?: Array<InlineResponse20013Price>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof UnunifiPricefeedQueryAllPriceResponse
     */
    pagination?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedQueryAllRawPriceResponse
 */
export interface UnunifiPricefeedQueryAllRawPriceResponse {
    /**
     * 
     * @type {Array<InlineResponse20014Prices>}
     * @memberof UnunifiPricefeedQueryAllRawPriceResponse
     */
    prices?: Array<InlineResponse20014Prices>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof UnunifiPricefeedQueryAllRawPriceResponse
     */
    pagination?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedQueryGetPriceResponse
 */
export interface UnunifiPricefeedQueryGetPriceResponse {
    /**
     * 
     * @type {InlineResponse20013Price}
     * @memberof UnunifiPricefeedQueryGetPriceResponse
     */
    price?: InlineResponse20013Price;
}
/**
 * 
 * @export
 * @interface UnunifiPricefeedQueryParamsResponse
 */
export interface UnunifiPricefeedQueryParamsResponse {
    /**
     * 
     * @type {InlineResponse20015Params}
     * @memberof UnunifiPricefeedQueryParamsResponse
     */
    params?: InlineResponse20015Params;
}
/**
 * 
 * @export
 * @interface UnunifiUnunifidistParams
 */
export interface UnunifiUnunifidistParams {
    /**
     * 
     * @type {boolean}
     * @memberof UnunifiUnunifidistParams
     */
    active?: boolean;
    /**
     * 
     * @type {Array<InlineResponse20010ParamsPeriods>}
     * @memberof UnunifiUnunifidistParams
     */
    periods?: Array<InlineResponse20010ParamsPeriods>;
}
/**
 * 
 * @export
 * @interface UnunifiUnunifidistPeriod
 */
export interface UnunifiUnunifidistPeriod {
    /**
     * 
     * @type {string}
     * @memberof UnunifiUnunifidistPeriod
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiUnunifidistPeriod
     */
    end?: string;
    /**
     * 
     * @type {string}
     * @memberof UnunifiUnunifidistPeriod
     */
    inflation?: string;
}
/**
 * 
 * @export
 * @interface UnunifiUnunifidistQueryGetBalancesResponse
 */
export interface UnunifiUnunifidistQueryGetBalancesResponse {
    /**
     * 
     * @type {Array<InlineResponse2004CdpCollateral>}
     * @memberof UnunifiUnunifidistQueryGetBalancesResponse
     */
    balances?: Array<InlineResponse2004CdpCollateral>;
}
/**
 * 
 * @export
 * @interface UnunifiUnunifidistQueryParamsResponse
 */
export interface UnunifiUnunifidistQueryParamsResponse {
    /**
     * 
     * @type {InlineResponse20010Params}
     * @memberof UnunifiUnunifidistQueryParamsResponse
     */
    params?: InlineResponse20010Params;
}

/**
 * QueryApi - axios parameter creator
 * @export
 */
export const QueryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAll: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/cdp/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auction: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('auction', 'id', id)
            const localVarPath = `/ununifi/auction/auctions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionAll: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/auction/auctions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionParams: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/auction/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balances: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/ununifidist/balances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} owner 
         * @param {string} collateralType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cdp: async (owner: string, collateralType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('cdp', 'owner', owner)
            // verify required parameter 'collateralType' is not null or undefined
            assertParamExists('cdp', 'collateralType', collateralType)
            const localVarPath = `/ununifi/cdp/cdps/owners/{owner}/collateral-types/{collateral_type}/cdp`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"collateral_type"}}`, encodeURIComponent(String(collateralType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cdpAll: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/cdp/cdps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cdpParams: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/cdp/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} owner 
         * @param {string} collateralType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositAll: async (owner: string, collateralType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('depositAll', 'owner', owner)
            // verify required parameter 'collateralType' is not null or undefined
            assertParamExists('depositAll', 'collateralType', collateralType)
            const localVarPath = `/ununifi/cdp/deposits/owners/{owner}/collateral-types/{collateral_type}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"collateral_type"}}`, encodeURIComponent(String(collateralType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incentiveParams: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/incentive/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketAll: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/pricefeed/markets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} marketId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oracleAll: async (marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketId' is not null or undefined
            assertParamExists('oracleAll', 'marketId', marketId)
            const localVarPath = `/ununifi/pricefeed/markets/{market_id}/oracles`
                .replace(`{${"market_id"}}`, encodeURIComponent(String(marketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} marketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        price: async (marketId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketId' is not null or undefined
            assertParamExists('price', 'marketId', marketId)
            const localVarPath = `/ununifi/pricefeed/markets/{market_id}/price`
                .replace(`{${"market_id"}}`, encodeURIComponent(String(marketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        priceAll: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/pricefeed/prices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricefeedParams: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/pricefeed/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} marketId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rawPriceAll: async (marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketId' is not null or undefined
            assertParamExists('rawPriceAll', 'marketId', marketId)
            const localVarPath = `/ununifi/pricefeed/markets/{market_id}/raw_prices`
                .replace(`{${"market_id"}}`, encodeURIComponent(String(marketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ununifidistParams: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ununifi/ununifidist/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueryApi - functional programming interface
 * @export
 */
export const QueryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QueryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auction(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auction(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionParams(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balances(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.balances(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} owner 
         * @param {string} collateralType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cdp(owner: string, collateralType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cdp(owner, collateralType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cdpAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cdpAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cdpParams(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cdpParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} owner 
         * @param {string} collateralType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async depositAll(owner: string, collateralType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.depositAll(owner, collateralType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incentiveParams(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incentiveParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} marketId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oracleAll(marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oracleAll(marketId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} marketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async price(marketId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20013>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.price(marketId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async priceAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20016>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.priceAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pricefeedParams(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20015>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pricefeedParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} marketId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rawPriceAll(marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20014>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rawPriceAll(marketId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ununifidistParams(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ununifidistParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QueryApi - factory interface
 * @export
 */
export const QueryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QueryApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAll(options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.accountAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auction(id: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.auction(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.auctionAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionParams(options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.auctionParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balances(options?: any): AxiosPromise<InlineResponse2009> {
            return localVarFp.balances(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} owner 
         * @param {string} collateralType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cdp(owner: string, collateralType: string, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.cdp(owner, collateralType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cdpAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.cdpAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cdpParams(options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.cdpParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} owner 
         * @param {string} collateralType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositAll(owner: string, collateralType: string, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.depositAll(owner, collateralType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incentiveParams(options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.incentiveParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary this line is used by starport scaffolding # 2
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<InlineResponse20011> {
            return localVarFp.marketAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} marketId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oracleAll(marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<InlineResponse20012> {
            return localVarFp.oracleAll(marketId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} marketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        price(marketId: string, options?: any): AxiosPromise<InlineResponse20013> {
            return localVarFp.price(marketId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        priceAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<InlineResponse20016> {
            return localVarFp.priceAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricefeedParams(options?: any): AxiosPromise<InlineResponse20015> {
            return localVarFp.pricefeedParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} marketId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rawPriceAll(marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any): AxiosPromise<InlineResponse20014> {
            return localVarFp.rawPriceAll(marketId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ununifidistParams(options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.ununifidistParams(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
export class QueryApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public accountAll(options?: any) {
        return QueryApiFp(this.configuration).accountAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary this line is used by starport scaffolding # 2
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public auction(id: string, options?: any) {
        return QueryApiFp(this.configuration).auction(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public auctionAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any) {
        return QueryApiFp(this.configuration).auctionAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public auctionParams(options?: any) {
        return QueryApiFp(this.configuration).auctionParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary this line is used by starport scaffolding # 2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public balances(options?: any) {
        return QueryApiFp(this.configuration).balances(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary this line is used by starport scaffolding # 2
     * @param {string} owner 
     * @param {string} collateralType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public cdp(owner: string, collateralType: string, options?: any) {
        return QueryApiFp(this.configuration).cdp(owner, collateralType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public cdpAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any) {
        return QueryApiFp(this.configuration).cdpAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public cdpParams(options?: any) {
        return QueryApiFp(this.configuration).cdpParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} owner 
     * @param {string} collateralType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public depositAll(owner: string, collateralType: string, options?: any) {
        return QueryApiFp(this.configuration).depositAll(owner, collateralType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public incentiveParams(options?: any) {
        return QueryApiFp(this.configuration).incentiveParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary this line is used by starport scaffolding # 2
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public marketAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any) {
        return QueryApiFp(this.configuration).marketAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} marketId 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public oracleAll(marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any) {
        return QueryApiFp(this.configuration).oracleAll(marketId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} marketId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public price(marketId: string, options?: any) {
        return QueryApiFp(this.configuration).price(marketId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public priceAll(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any) {
        return QueryApiFp(this.configuration).priceAll(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public pricefeedParams(options?: any) {
        return QueryApiFp(this.configuration).pricefeedParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} marketId 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public rawPriceAll(marketId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, options?: any) {
        return QueryApiFp(this.configuration).rawPriceAll(marketId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public ununifidistParams(options?: any) {
        return QueryApiFp(this.configuration).ununifidistParams(options).then((request) => request(this.axios, this.basePath));
    }
}


